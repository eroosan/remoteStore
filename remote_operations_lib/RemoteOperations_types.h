/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RemoteOperations_TYPES_H
#define RemoteOperations_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace RemoteOperations { namespace thrift { namespace impl {

class UserData;

typedef struct _UserData__isset {
  _UserData__isset() : userId(false), userName(false) {}
  bool userId :1;
  bool userName :1;
} _UserData__isset;

class UserData : public virtual ::apache::thrift::TBase {
 public:

  UserData(const UserData&);
  UserData& operator=(const UserData&);
  UserData() : userId(0), userName() {
  }

  virtual ~UserData() throw();
  int8_t userId;
  std::string userName;

  _UserData__isset __isset;

  void __set_userId(const int8_t val);

  void __set_userName(const std::string& val);

  bool operator == (const UserData & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const UserData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserData &a, UserData &b);

std::ostream& operator<<(std::ostream& out, const UserData& obj);

}}} // namespace

#endif

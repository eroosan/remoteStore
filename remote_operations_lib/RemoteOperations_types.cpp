/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RemoteOperations_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace RemoteOperations { namespace thrift { namespace impl {


UserData::~UserData() throw() {
}


void UserData::__set_userId(const int8_t val) {
  this->userId = val;
}

void UserData::__set_userName(const std::string& val) {
  this->userName = val;
}
std::ostream& operator<<(std::ostream& out, const UserData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserData");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserData &a, UserData &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.userName, b.userName);
  swap(a.__isset, b.__isset);
}

UserData::UserData(const UserData& other0) {
  userId = other0.userId;
  userName = other0.userName;
  __isset = other0.__isset;
}
UserData& UserData::operator=(const UserData& other1) {
  userId = other1.userId;
  userName = other1.userName;
  __isset = other1.__isset;
  return *this;
}
void UserData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserData(";
  out << "userId=" << to_string(userId);
  out << ", " << "userName=" << to_string(userName);
  out << ")";
}

}}} // namespace
